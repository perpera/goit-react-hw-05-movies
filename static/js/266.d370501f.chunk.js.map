{"version":3,"file":"static/js/266.d370501f.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","pages/Home.js","tools/ScrollUp/ScrollUp.styled.js","tools/ScrollUp/ScrollUp.js","tools/getPercentage.js","tools/getReviewColor.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 40px;\n  padding: 60px 0;\n`;\n\nexport const Item = styled.li`\n  position: relative;\n  transition: transform 200ms linear;\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: calc((100%) - 80px) / 3;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc((100%) - 200px) / 6;\n  }\n`;\n\nexport const MovieTitle = styled.p`\n  text-align: center;\n  font-weight: 700;\n  font-size: 24px;\n  max-width: 300px;\n  color: #f2efee;\n\n  @media screen and (min-width: 428px) {\n    max-width: 398px;\n  }\n\n  @media screen and (min-width: 768px) {\n    max-width: 200px;\n    font-size: 21px;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n`;\n\nexport const MoviePoster = styled.img`\n  width: 250px;\n\n  @media screen and (min-width: 768px) {\n  }\n`;\n\nexport const RateAvg = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  color: #f2efee;\n  border: 1px solid #f2efee;\n  width: 50px;\n  height: 50px;\n`;\n\nexport const MovieRelease = styled.p`\n  display: flex;\n  gap: 4px;\n  align-items: center;\n  color: #f2efee;\n`;\n","import { Container } from 'components/SharedLayout/SharedLayout.styled';\nimport {\n  List,\n  Item,\n  MovieLink,\n  MoviePoster,\n  MovieRelease,\n  MovieTitle,\n  RateAvg,\n} from './MoviesList.styled';\nimport getPercentage from 'tools/getPercentage';\nimport { getReviewColor } from 'tools/getReviewColor';\nimport { CiCalendar } from 'react-icons/ci';\nimport defPoster from '../../img/def_poster.png';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <Container>\n      <List>\n        {movies.map(\n          ({ id, original_title, poster_path, rate_avg, release_date }) => (\n            <Item key={id}>\n              <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                <MoviePoster\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w200${poster_path}`\n                      : defPoster\n                  }\n                  alt={original_title}\n                />\n                <RateAvg\n                  style={{\n                    backgroundColor: getReviewColor(getPercentage(rate_avg)),\n                  }}\n                >\n                  {getPercentage(rate_avg)}\n                </RateAvg>\n                <MovieTitle>{original_title}</MovieTitle>\n                {release_date && (\n                  <MovieRelease>\n                    <CiCalendar /> {release_date}\n                  </MovieRelease>\n                )}\n              </MovieLink>\n            </Item>\n          )\n        )}\n      </List>\n    </Container>\n  );\n};\n\nexport default MoviesList;\n","import { getTrending } from 'movies-api';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { notification } from 'tools/notification';\nimport { ScrollUp } from 'tools/ScrollUp/ScrollUp';\n\nconst Home = () => {\n  const [trending, setTrending] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n\n    const fetchTrending = async () => {\n      try {\n        const response = await getTrending();\n        setTrending(response);\n      } catch ({ message }) {\n        notification(message);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchTrending();\n  }, []);\n\n  return (\n    <>\n      {loader && <Loader />}\n      {trending.length > 0 && <MoviesList movies={trending} />}\n      <ScrollUp />\n    </>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components';\n\nexport const ScrollUpBtn = styled.button`\n  width: 80px;\n  height: 80px;\n  position: fixed;\n  bottom: 40px;\n  right: 36px;\n  border-radius: 50%;\n  border: 3px solid #f2efee;\n  background-color: #8a1d21;\n  transition: transform 200ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { ScrollUpBtn } from './ScrollUp.styled';\nimport { CiCircleChevUp } from 'react-icons/ci';\n\nexport const ScrollUp = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollPosition = window.scrollY;\n      if (scrollPosition > 200) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <ScrollUpBtn\n      onClick={scrollToTop}\n      style={{ display: isVisible ? 'block' : 'none' }}\n    >\n      <CiCircleChevUp size={33} fill=\"#F2EFEE\" />\n    </ScrollUpBtn>\n  );\n};\n","const getPercentage = num => {\n  return Math.ceil(Number(num) * 10);\n};\n\nexport default getPercentage;\n","export const getReviewColor = percentage => {\n  let color = '';\n  switch (true) {\n    case percentage >= 70:\n      color = '#1cb114';\n      break;\n    case percentage > 30:\n      color = '#c3c737';\n      break;\n    case percentage === 0:\n      color = '#64645b';\n      break;\n    default:\n      color = '#8BD538';\n  }\n  return color;\n};\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","MovieTitle","_templateObject3","MovieLink","Link","_templateObject4","MoviePoster","_templateObject5","RateAvg","_templateObject6","MovieRelease","_templateObject7","_ref","movies","location","_jsx","Container","children","map","_ref2","id","original_title","poster_path","rate_avg","release_date","_jsxs","to","concat","state","from","src","defPoster","alt","style","backgroundColor","getReviewColor","getPercentage","CiCalendar","Home","trending","setTrending","useState","loader","setLoader","useEffect","async","response","getTrending","message","notification","fetchTrending","_Fragment","Loader","length","MoviesList","ScrollUp","ScrollUpBtn","isVisible","setIsVisible","handleScroll","scrollPosition","window","scrollY","addEventListener","removeEventListener","onClick","scrollToTop","scrollTo","top","behavior","display","CiCircleChevUp","size","fill","num","Math","ceil","Number","percentage","color"],"sourceRoot":""}